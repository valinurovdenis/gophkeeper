// Package mocks contains mocks for storages.
package mocks

import (
	context "context"

	mock "github.com/stretchr/testify/mock"

	proto "github.com/valinurovdenis/gophkeeper/internal/proto"
)

// StreamingFileStorage is an autogenerated mock type for the StreamingFileStorage type
type StreamingFileStorage struct {
	mock.Mock
}

// Delete provides a mock function with given fields: ctx, fileId
func (_m *StreamingFileStorage) Delete(ctx context.Context, fileId string) error {
	ret := _m.Called(ctx, fileId)

	if len(ret) == 0 {
		panic("no return value specified for Delete")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string) error); ok {
		r0 = rf(ctx, fileId)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Download provides a mock function with given fields: stream, fileId
func (_m *StreamingFileStorage) Download(stream proto.GophKeeperService_DownloadFileServer, fileId string) error {
	ret := _m.Called(stream, fileId)

	if len(ret) == 0 {
		panic("no return value specified for Download")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(proto.GophKeeperService_DownloadFileServer, string) error); ok {
		r0 = rf(stream, fileId)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Upload provides a mock function with given fields: stream, fileSize, fileId
func (_m *StreamingFileStorage) Upload(stream proto.GophKeeperService_UploadFileServer, fileSize int64, fileId string) error {
	ret := _m.Called(stream, fileSize, fileId)

	if len(ret) == 0 {
		panic("no return value specified for Upload")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(proto.GophKeeperService_UploadFileServer, int64, string) error); ok {
		r0 = rf(stream, fileSize, fileId)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// NewStreamingFileStorage creates a new instance of StreamingFileStorage. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewStreamingFileStorage(t interface {
	mock.TestingT
	Cleanup(func())
}) *StreamingFileStorage {
	mock := &StreamingFileStorage{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
