// Package mocks contains mocks for storages.
package mocks

import (
	context "context"

	mock "github.com/stretchr/testify/mock"

	proto "github.com/valinurovdenis/gophkeeper/internal/proto"
)

// MetadataStorage is an autogenerated mock type for the MetadataStorage type
type MetadataStorage struct {
	mock.Mock
}

// AddFileInfo provides a mock function with given fields: _a0, fileInfo
func (_m *MetadataStorage) AddFileInfo(_a0 context.Context, fileInfo *proto.FileInfo) error {
	ret := _m.Called(_a0, fileInfo)

	if len(ret) == 0 {
		panic("no return value specified for AddFileInfo")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, *proto.FileInfo) error); ok {
		r0 = rf(_a0, fileInfo)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// DeleteFileInfo provides a mock function with given fields: _a0, fileId
func (_m *MetadataStorage) DeleteFileInfo(_a0 context.Context, fileId string) error {
	ret := _m.Called(_a0, fileId)

	if len(ret) == 0 {
		panic("no return value specified for DeleteFileInfo")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string) error); ok {
		r0 = rf(_a0, fileId)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// GetFileById provides a mock function with given fields: _a0, fileId
func (_m *MetadataStorage) GetFileById(_a0 context.Context, fileId string) (*proto.FileInfo, error) {
	ret := _m.Called(_a0, fileId)

	if len(ret) == 0 {
		panic("no return value specified for GetFileById")
	}

	var r0 *proto.FileInfo
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string) (*proto.FileInfo, error)); ok {
		return rf(_a0, fileId)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string) *proto.FileInfo); ok {
		r0 = rf(_a0, fileId)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*proto.FileInfo)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(_a0, fileId)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetFilesByLogin provides a mock function with given fields: _a0, login
func (_m *MetadataStorage) GetFilesByLogin(_a0 context.Context, login string) (*proto.ListFiles, error) {
	ret := _m.Called(_a0, login)

	if len(ret) == 0 {
		panic("no return value specified for GetFilesByLogin")
	}

	var r0 *proto.ListFiles
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string) (*proto.ListFiles, error)); ok {
		return rf(_a0, login)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string) *proto.ListFiles); ok {
		r0 = rf(_a0, login)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*proto.ListFiles)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(_a0, login)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Ping provides a mock function with given fields:
func (_m *MetadataStorage) Ping() error {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for Ping")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func() error); ok {
		r0 = rf()
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// NewMetadataStorage creates a new instance of MetadataStorage. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMetadataStorage(t interface {
	mock.TestingT
	Cleanup(func())
}) *MetadataStorage {
	mock := &MetadataStorage{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
